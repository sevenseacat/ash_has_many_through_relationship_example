defmodule Example.Repo.Migrations.SetUpBasicDataModel do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:regions, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
      add(:name, :text, null: false)
      add(:population, :bigint, null: false)
      add(:country_id, :uuid)
    end

    create table(:countries, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
    end

    alter table(:regions) do
      modify(
        :country_id,
        references(:countries,
          column: :id,
          name: "regions_country_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:regions, [:name], name: "regions_name_index")

    alter table(:countries) do
      add(:name, :text, null: false)
    end

    create unique_index(:countries, [:name], name: "countries_name_index")

    create table(:cities, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
      add(:name, :text, null: false)
      add(:population, :bigint, null: false)

      add(
        :region_id,
        references(:regions,
          column: :id,
          name: "cities_region_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:cities, [:name], name: "cities_name_index")
  end

  def down do
    drop_if_exists(unique_index(:cities, [:name], name: "cities_name_index"))

    drop(constraint(:cities, "cities_region_id_fkey"))

    drop(table(:cities))

    drop_if_exists(unique_index(:countries, [:name], name: "countries_name_index"))

    alter table(:countries) do
      remove(:name)
    end

    drop_if_exists(unique_index(:regions, [:name], name: "regions_name_index"))

    drop(constraint(:regions, "regions_country_id_fkey"))

    alter table(:regions) do
      modify(:country_id, :uuid)
    end

    drop(table(:countries))

    drop(table(:regions))
  end
end
